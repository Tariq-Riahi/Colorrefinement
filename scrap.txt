from collections import Counter

from graph import *
import time

# give all the vertices a color based on the amount of neighbours
def initial_coloring(G:Graph):
    for i in range(len(G)):
        G.vertices[i].color = G.vertices[i].count_neighbours()

def max_color(G:Graph):
    res = 0
    for i in range(len(G)):
        res = max(res, G.vertices[i].color)
    return res

def refine(G:Graph):
    initial_coloring(G)

    # the current highest color
    mc = max_color(G)

    vrt = G.vertices

    finished = False

    while not finished:
        finished = True
        changed_vertices = []

        for i in range(len(G)):
            vertex1 = vrt[i]
            if True:
                c = vertex1.color
                nc1 = vertex1.color_neighbours()
                nc1.sort()
                changed = False

                for j in range(len(G)):
                    vertex2 = vrt[j]
                    if vertex2.color == c and i != j:

                        nc2 = vertex2.color_neighbours()
                        nc2.sort()
                        if nc1 != nc2:
                            finished = False
                            changed = True
                            break


                if changed:
                    # List of vertices to be changed
                    tbc = []
                    for j in range(len(G)):
                        vertex2 = vrt[j]
                        if vertex2.color == c:
                            nc2 = vertex2.color_neighbours()
                            nc2.sort()
                            if nc1 == nc2:
                                tbc.append(vertex2)
                                changed_vertices.append(vertex2)

                    mc += 1
                    vertex1.color = mc
                    for j in range(len(tbc)):
                        tbc[j].color = mc