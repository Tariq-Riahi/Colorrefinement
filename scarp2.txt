def refine(G: Graph):
    initial_coloring(G)

    cv = color_vectors(G)
    # the current highest color
    mc = max_color(G)

    vrt = G.vertices

    finished = False

    while not finished:
        finished = True
        changed_vertices = []

        for i in range(len(G)):
            vertex1 = vrt[i]
            if True: #vertex1 not in changed_vertices:
                c = vertex1.color
                nc1 = vertex1.color_neighbours()
                nc1.sort()
                changed = False

                # List of vertices with the same color
                sc = cv[G.vertices[i].color]
                for j in range(len(sc)):
                    vertex2 = sc[j]
                    if vertex1 != vertex2:
                        nc2 = vertex2.color_neighbours()
                        nc2.sort()
                        if nc1 != nc2:
                            finished = False
                            changed = True
                            break

                if changed:
                    # List of vertices to be changed
                    tbc = []
                    for j in range(len(sc)):
                        vertex2 = sc[j]
                        if vertex1 != vertex2:
                            nc2 = vertex2.color_neighbours()
                            nc2.sort()
                            if nc1 == nc2:
                                tbc.append(vertex2)
                                changed_vertices.append(vertex2)

                    mc += 1

                    cv[vertex1.color].remove(vertex1)
                    vertex1.color = mc

                    if vertex1.color in cv:
                        cv[vertex1.color].append(vertex1)
                    else:
                        cv[vertex1.color] = [vertex1]
                    for j in range(len(tbc)):
                        cv[tbc[j].color].remove(tbc[j])

                        tbc[j].color = mc

                        cv[tbc[j].color].append(tbc[j])